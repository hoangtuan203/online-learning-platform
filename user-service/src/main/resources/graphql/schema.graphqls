type User {
    id: ID!
    username: String!
    name: String!
    email: String!
    role: Role!
    avatarUrl: String
    createdAt: String!
    updatedAt: String!
}
type UserPage {
    user: [User!]!
    totalElements: Int!
    totalPages: Int!
    currentPage: Int!
}

input AddUserRequest{
    username: String!
    password: String!
    name: String!
    email: String!
    role: Role!
    avatarUrl: String!
}

enum Role {
    STUDENT
    INSTRUCTOR
    ADMIN
}

input LoginInput {
    username: String!
    password: String!
}

type AuthResponse {
    accessToken: String!
    user: User!  # Bao gá»“m user info sau login
}
type Query {
    findAllUsers(page: Int = 0, size: Int = 10): UserPage!
    getUserById(id: ID!): User
    searchUsers(name: String, role: Role, page: Int = 0, size: Int = 5): UserPage!
}
type Mutation {
    addUser(input: AddUserRequest!): User!,
    login(input: LoginInput!): AuthResponse!,
    forgotPassword(username: String!): User!
}

